pipeline {
    agent none

    stages {
        stage('build') {
                agent {
        docker{
            image "python:2.7.16-slim"
            args "--user root"
        }
    }
            when {
             changeset "**/vote/**"
            }
                 
            steps {
                echo 'Installing python pip for vote app'
                dir('vote'){
                        sh "pip install -r requirements.txt"
                }
            }
        }
        stage('test') {
                agent {
        docker{
            image "python:2.7.16-slim"
            args "--user root"
        }
    }
            when {
             changeset "**/vote/**"
            }
                 
            steps {
                echo 'Installing and testing python pip for vote app'
                dir ('vote'){
                    sh "pip install -r requirements.txt"
                    sh "nosetests -v"
                }
            }
        }
        stage('docker-package') {
        agent any
            when {
             changeset "**/vote/**"
            }
                 
            steps {
                echo 'Installing and testing python pip for vote app'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin'){
                        def workerImage = docker.build("jlargaespada/vote:v${env.BUILD_ID}", "./vote")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                    }
                }
            }
        }
        }
               
    post {
        always {
            echo "Pipeline for vote python pip run is complete.."
        }
        failure {
                slackSend (channel: "test-jenkins", message: "Build failure - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success {
                slackSend (channel: "test-jenkins", message: "Build succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
